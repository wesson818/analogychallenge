{"version":3,"sources":["components/useLocalStorage.js","components/ActionButton.js","views/Question.js","components/MediaCard.js","App.js","components/useUpdateLogger.js","index.js"],"names":["useLocalStorage","key","initialValue","useState","savedValue","JSON","parse","localStorage","getItem","Function","getSavedValue","value","setValue","useEffect","setItem","stringify","ActionButton","props","showAnswer","option","answer","handleClick","Button","variant","size","color","endIcon","Check","Close","onClick","console","log","Question","words","currentLevel","questionEachLevel","handleQuit","unlockNextLevel","handleStartClick","number","setNumber","setShowAnswer","done","setDone","correct","setCorrect","endText","setEndText","e","currentTarget","prevCorrect","setTimeout","prevNumber","passRate","handleReset","question","map","word","i","Chip","label","options","ExitToApp","Send","Number","event","Replay","className","startIcon","useStyles","makeStyles","root","width","textAlign","verticalAlign","margin","media","height","button","MediaCard","classes","title","description","disabled","Card","CardActionArea","CardContent","Typography","gutterBottom","component","CardActions","App","showQuestion","setShowQuestion","setWords","setCurrentLevel","userLevel","setUserLevel","j","cards","data","desc","level","lowerRange","upperRange","filter","wordsArray","id","prevLevel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a366ab15.chunk.js","sourcesContent":["import {useState, useEffect} from 'react'\r\n\r\nfunction getSavedValue(key, initialValue) {\r\n    const savedValue = JSON.parse(localStorage.getItem(key))\r\n    if(savedValue) return savedValue\r\n    if(initialValue instanceof Function) return initialValue()\r\n    return initialValue\r\n}\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    const [value, setValue] = useState(()=>{\r\n        return getSavedValue(key, initialValue)\r\n    })\r\n\r\n    useEffect(()=>{\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    },[value])\r\n\r\n    return [value, setValue]\r\n}","import React from 'react'\r\nimport {Button} from '@material-ui/core';\r\nimport {Check,Close} from '@material-ui/icons'\r\n\r\nexport default function ActionButton(props) {\r\n    const {showAnswer,option,answer,handleClick} = props\r\n    function placeholderClick() {\r\n        console.log(\"block double click when waiting\")\r\n    }\r\n    return (\r\n        <Button \r\n        variant={showAnswer?\"contained\":\"outlined\"} \r\n        size=\"large\" \r\n        color={showAnswer ? (option===answer?\"primary\":\"secondary\") : \"primary\"}\r\n        endIcon={showAnswer && (option===answer?<Check />:<Close />)}\r\n        onClick={!showAnswer ? handleClick : placeholderClick} \r\n        value={option}>{option}</Button>\r\n    )\r\n}\r\n","\r\nimport React, {useState} from 'react';\r\nimport '../App.css';\r\nimport {Button,Chip} from '@material-ui/core';\r\nimport {ExitToApp,Send,Replay} from '@material-ui/icons'\r\nimport ActionButton from '../components/ActionButton'\r\n\r\nexport default function Question(props) {\r\n \r\n  const timeBetweenQuestions = 500\r\n  const passRate = 0.5;\r\n\r\n  const {words, currentLevel, questionEachLevel, handleQuit, unlockNextLevel, handleStartClick} = props\r\n  const [number, setNumber] = useState(0)\r\n  const [showAnswer, setShowAnswer] = useState(false)\r\n  const [done, setDone] = useState(false)\r\n  const [correct,setCorrect] = useState(0)\r\n  const [endText, setEndText] = useState(\"\")\r\n\r\n  function handleClick(e) {\r\n    console.log(words[number].answer, \"?=\", e.currentTarget.value)\r\n    setShowAnswer(true)\r\n    if(words[number].answer === e.currentTarget.value) {\r\n        setCorrect(prevCorrect => {\r\n            return prevCorrect + 1\r\n        })\r\n    }\r\n    setTimeout(()=>{\r\n      if(number < questionEachLevel) {\r\n        setNumber(prevNumber => {\r\n          return prevNumber + 1\r\n        })\r\n        setShowAnswer(false)\r\n      }else{\r\n        setDone(true)\r\n        if(correct / questionEachLevel > passRate){\r\n            unlockNextLevel()\r\n            setEndText(`Congratulations! You got ${correct} of ${questionEachLevel} correct and unlocked next level.`)\r\n        }else{\r\n            setEndText(`Good try. You didn't passed ${passRate*100}% to unlock next level. Please try again.`)\r\n        }\r\n      }\r\n    },timeBetweenQuestions)\r\n  }\r\n\r\n  function handleReset() {\r\n      setNumber(0)\r\n      setShowAnswer(false)\r\n      setDone(false)\r\n      setCorrect(0)\r\n      setEndText(\"\")\r\n  }\r\n\r\n  const question = words[number].words.map((word,i)=>{\r\n    return (\r\n      <span key={i}>\r\n        <Chip label={word} variant=\"outlined\" /> {i!==3 && (i===1? ' :: ':' : ')}\r\n      </span>\r\n    )\r\n  })\r\n\r\n  const answer = words[number].options.map((option,i)=>{\r\n    return (\r\n      <span key={i}>\r\n        <ActionButton showAnswer={showAnswer} option={option} answer={words[number].answer} handleClick={handleClick} /> {i===1 && <br />}\r\n      </span>\r\n    )\r\n  })\r\n\r\n  return (\r\n      <>\r\n        <h1>analogychallenge - Level {currentLevel}</h1><br />\r\n        {!done ? \r\n            <div>\r\n                <div className=\"question\">\r\n                    {question}\r\n                </div>\r\n                <div className=\"answer\">\r\n                    {answer}\r\n                </div>\r\n                <br />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    startIcon={<ExitToApp />}\r\n                    onClick = {handleQuit}\r\n                >\r\n                    Quit\r\n                </Button>\r\n            </div>\r\n            :\r\n            <div>\r\n                <h3>{endText}</h3>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    endIcon={<ExitToApp />}\r\n                    onClick = {handleQuit}\r\n                >\r\n                    Back to list\r\n                </Button> &nbsp;&nbsp;&nbsp;\r\n                {\r\n                    correct / questionEachLevel > passRate ? \r\n                    <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    endIcon={<Send />}\r\n                    value={Number(currentLevel)+1}\r\n                    onClick = {(event)=>{\r\n                            handleStartClick(event);\r\n                            handleReset();\r\n                        }\r\n                    }\r\n                    >\r\n                        Go Next Level\r\n                    </Button>\r\n                    :\r\n                    <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    endIcon={<Replay />}\r\n                    onClick = {handleReset}\r\n                    >\r\n                        Try Again\r\n                    </Button>\r\n                }\r\n            </div>\r\n        }\r\n      </>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n// import CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 240,\r\n    textAlign: \"left\",\r\n    verticalAlign: \"top\",\r\n    margin: \"0 10px 30px 10px\"\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n  button: {\r\n    margin: \"0 5px 15px\",\r\n    width: \"100%\"\r\n  }\r\n});\r\n\r\nexport default function MediaCard(props) {\r\n  const classes = useStyles()\r\n  const {title, description, value, handleStartClick, disabled} = props\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea>\r\n        {/* <CardMedia\r\n          className={classes.media}\r\n          image=\"https://via.placeholder.com/250x150\"\r\n          title={title}\r\n        /> */}\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {title}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            {description}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button variant=\"contained\" color=\"primary\" size=\"large\" \r\n        disabled={disabled} className={classes.button} value={value} onClick={handleStartClick}>\r\n          Start\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport useLocalStorage from './components/useLocalStorage';\nimport useUpdateLogger from './components/useUpdateLogger';\nimport data from './data/words.json';\nimport Question from './views/Question'\nimport MediaCard from './components/MediaCard'\n\nfunction App() {\n\n  const questionEachLevel = 6\n  const [showQuestion, setShowQuestion] = useState(false)\n  const [words, setWords] = useState([])\n  const [currentLevel, setCurrentLevel] = useState(1)\n  const [userLevel, setUserLevel] = useLocalStorage(\"userLevel\",1)\n  useUpdateLogger(userLevel)\n  \n\n  let j = 0\n  const cards = data.map((words,i) => {\n    if(i%questionEachLevel === 0) {\n      j++\n      let desc = `Click START to challenge level ${j} `\n      let disabled = false\n      if(userLevel<j) {\n        desc = `Please finish level ${j-1} to unlock`\n        disabled = true\n      }\n      return (\n        <MediaCard key={i} title={\"Level \"+j} value={j} description={desc} disabled={disabled} handleStartClick={handleStartClick} />  \n      )\n    }\n  })\n\n  function handleStartClick(e){\n    const level = e.currentTarget.value\n    setCurrentLevel(Number(level))\n    const lowerRange = questionEachLevel*(level-1)\n    const upperRange = questionEachLevel*level\n    setWords(data.filter((wordsArray,i)=>{\n        return wordsArray.id >= lowerRange && wordsArray.id <= upperRange\n    }))\n    setShowQuestion(true)\n  }\n\n  function handleQuit() {\n    setShowQuestion(false)\n  }\n\n  function unlockNextLevel() {\n    if(userLevel === currentLevel){\n      setUserLevel(prevLevel => {\n        return prevLevel + 1\n      })\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {\n        showQuestion ?\n        <Question words={words} currentLevel={currentLevel} questionEachLevel={questionEachLevel} \n        handleQuit={handleQuit} unlockNextLevel={unlockNextLevel} handleStartClick={handleStartClick} /> \n        :\n        <div>\n          <h1>analogychallenge</h1>\n          <p>Every level has {questionEachLevel} questions. Pass 50% can unlock next level.</p>\n          <div className=\"listCards\">\n            {cards}\n          </div>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect } from \"react\";\r\n\r\nexport default function useUpdateLogger(value){\r\n    useEffect(()=>{\r\n        console.log(value)\r\n    },[value])\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}